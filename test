<?php
//////////////////////////
//////////////////////////
// USAGE ./test [detail] [random] [show] [allsh]
//////////////////////////
//////////////////////////

define('NO_ERROR', 0);
define('ERROR_DIFFERENT_SIGNAL', 1);
define('CHECK_DIFFERENT_SIGNAL', 2);

declare(ticks = 1);		
pcntl_signal(SIGINT, "sig_handler");

///////// ARGUMENT //////////
$testRandom 	= array_search("random", 	$argv) 	? true : false;
$detail 		= array_search("detail", 	$argv) 	? true : false;
$showOutput		= array_search("show", 		$argv) 	? true : false;
$allsh			= array_search("allsh", 	$argv) 	? true : false;
$OptValgrind	= array_search("valgrind", 	$argv) 	? true : false;
// $testSignal = array_search("signal", $argv)	? true : false;
$testSignal = TRUE;
//////////////////////////

$exitCodeValgrind	= 242;
$filetest			= "./testraw";
$valgrind			= "valgrind --leak-check=full --error-exitcode=$exitCodeValgrind ";
$shellexec1			= "42sh";
$shellexec2			= "sh";
$commentChar		= '#';
$randomTest			= 100;
$randomLengthMax	= 10;

//////////////// HERE RANDOM /////////////////////
$rshell 			= array("bash", "sh", "zsh", "csh");
$rlogic_operator 	= array("&&", "||", ";");
$rcommand 			= array("echo", "ls", "pwd");
//////////////// HERE RANDOM /////////////////////

$COLORGREY 		= "\033[37m";
$COLORPINK 		= "\033[36m";
$COLORCYAN 		= "\033[35m";
$COLORBLUE 		= "\033[34m";
$COLORYELLOW 	= "\033[33m";
$COLORGREEN 	= "\033[32m";
$COLORRED 		= "\033[31m";
$COLORCLOSE 	= "\033[0m";

$allerror 		= "";
$allerrorcheck 	= "";
$outputSelect 	= 0;
$countAll 		= 0;
$countOK 		= 0;
$countMaybe 	= 0;

if ($testRandom)
{
	while ($countAll < $randomTest) {

		// $command = random_bytes(10);
		$command = getRandomCommand();

		compute($command);
	}
}
else
{
	if (!$allsh)
		$rshell = array($shellexec2);
	foreach ($rshell as $key => $shellexec2) {
		if ($allsh)
			echo "------------------------ $shellexec2 ------------------------\n";
		$content = file($filetest, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
		foreach ($content as $key2 => $command) {
			$tmp = trim($command);
			if ($command && $tmp[0] == $commentChar)
				continue;
			compute($command);
		}
	}
}

echo $allerrorcheck;
echo $allerror;
$nb = $countOK + $countMaybe;
$nb2 = $countAll - $countMaybe;
if ($countOK == $nb2)
	echo "$COLORGREEN";
else
	echo "$COLORRED";

echo " ---------- Total $countOK/$nb2 ----------";
echo "$COLORCLOSE\n";

if ($nb != $countAll)
{
	print "$COLORRED"." ------ REGRESSION DETECTED  ------"."$COLORCLOSE\n";
	exit(1);
}
exit(0);

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////// FUNCTION ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

function getRandomCommand() {
	global $rcommand;
	global $rlogic_operator;

	$command  = "";
	$command .= get_random($rcommand);
	$command .= " ";
	$command .= get_random_argument(0);
	$command .= " ";
	$command .= get_random_string(0);
	$command .= " ";
	$command .= get_random($rlogic_operator);
	$command .= " ";
	$command .= get_random($rcommand);

	return ($command);
}

function sig_handler($signo) {
	global $signalHandled;
	$signalHandled = true;
}

function compute($command) {
	global $commentChar;
	global $countMaybe;
	global $countOK;
	global $countAll;
	global $allerror;
	global $allerrorcheck;
	global $detail;
	global $testSignal;
	global $COLORGREEN;
	global $COLORBLUE;
	global $COLORYELLOW;
	global $COLORRED;
	global $COLORCLOSE;
	global $shellexec1;
	global $shellexec2;
	global $showOutput;
	global $valgrind;
	global $OptValgrind;
	global $outputSelect;
	global $signalHandled;
	$signalHandled = false;

	$countAll++;
	try {

		exec("./$shellexec1 -c '$command' 2>&1", $tmp, $return_var1);
		exec("./$shellexec1 -c '$command' 2>/dev/null", $tmp1, $return_var11);

		if ($OptValgrind)
			exec("$valgrind ./$shellexec1 -c '$command' 2>/dev/null 1>/dev/null", $null, $return_valgrind);
		else
			$return_valgrind = 0;
		


		exec("$shellexec2 -c '$command' 2>&1", $tmp2, $return_var2);
		exec("$shellexec2 -c '$command' 2>/dev/null", $tmp3, $return_var22);
	} catch (Exception $e) {
		echo 'EXCEPTION THROWED';
	}

	// exception for command with pipe
	if ($signalHandled && $return_var1 == 2 && $return_var2 == 0)		
		$return_var1 = 0;

	file_put_contents("res1", implode("\n", $tmp)."\n");
	file_put_contents("res11", implode("\n", $tmp1)."\n");
	file_put_contents("res2", implode("\n", $tmp2)."\n");
	file_put_contents("res22", implode("\n", $tmp3)."\n");

	$res = shell_exec("diff res1 res2");
	$ERRSTDOUT = shell_exec("diff res11 res22");
	unlink("res1");
	unlink("res11");
	unlink("res2");
	unlink("res22");

	if ($ERRSTDOUT || check_error_signal($return_var1, $return_var2) == ERROR_DIFFERENT_SIGNAL || check_error_valgrind($return_valgrind))
		$outputSelect = 1;
	else
		$outputSelect = 2;

	if ($res || $ERRSTDOUT || check_error_signal($return_var1, $return_var2) || check_error_valgrind($return_valgrind))
	{
		if ($ERRSTDOUT || check_error_signal($return_var1, $return_var2) == ERROR_DIFFERENT_SIGNAL || check_error_valgrind($return_valgrind))
		{
			$allerror .= "$COLORRED [$shellexec2][KO] $COLORCLOSE";
			if (check_error_valgrind($return_valgrind))
				$allerror .= "$COLORRED [LEAKS] $COLORCLOSE";
			$allerror .= "\"$command\"\n";
		}
		else
		{
			$countMaybe++;
			$allerrorcheck .= "$COLORYELLOW [$shellexec2][CK] $COLORCLOSE";
			if (check_error_valgrind($return_valgrind))
				$allerrorcheck .= "$COLORRED [LEAKS] $COLORCLOSE";
			$allerrorcheck .= "\"$command\"\n";
		}
		if ($detail)
		{
			$res = preg_replace('/---\n|1c1\n|1c1,2\n|>|</', '', $res);
			add_error($res);
		}
		if (check_error_signal($return_var1, $return_var2))
		{
			add_error("$COLORBLUE DIFFERENT SIGNAL: $COLORCLOSE $shellexec1=$return_var1 vs $shellexec2=$return_var2\n");
		}
		if ($showOutput)
		{
			add_error("---\n".implode("\n", $tmp)."\n"."---\n");
		}
	}
	else
	{
		$countOK++;
		echo "$COLORGREEN [$shellexec2][OK] $COLORCLOSE";
		if (check_error_valgrind($return_valgrind))
			echo "$COLORRED [LEAKS] $COLORCLOSE";
		echo "\"$command\"\n";
		if ($showOutput)
			echo("---\n".implode("\n", $tmp)."\n"."---\n");
	}
}

function add_error($str) {
	global $allerror;
	global $allerrorcheck;
	global $outputSelect;

	if ($outputSelect == 1)
		$allerror .= $str;
	else if ($outputSelect == 2)
		$allerrorcheck .= $str;
}

function check_error_valgrind($return_valgrind) {
	global $OptValgrind;
	global $exitCodeValgrind;

	if ($OptValgrind && $return_valgrind == $exitCodeValgrind)
		return (1);
	else
		return (0);
}

function check_error_signal($return_var1, $return_var2) {
	global $testSignal;

	if ($testSignal && $return_var1 != $return_var2)		  	
	{		
		return (1);
	}		
	else		  
		return (0);
}

function get_ramdom_char() {
	$r = rand(0, 2);
	$chr = "";
	if ($r == 0)
		$chr = chr(rand(64, 90));	// @ A-Z
	if ($r == 1)
		$chr = chr(rand(97, 122));	// a-z
	if ($r == 2)
		$chr = chr(rand(48, 57));	// 0-9
	// if ($r == 2)
		// $chr = chr(45);	// -
	// return (chr(rand(32, 126)));
	return ($chr);
}

function get_random_string($length = 10) {
	global $randomLengthMax;

	if ($length < 0)
		$length = -$length;
	$str = "";
	if ($length == 0)
		$length = rand(1, $randomLengthMax);
	while ($length--)
		$str .= get_ramdom_char();
	return ($str);
}

function get_random_argument($length = 10) {
	global $randomLengthMax;

	if ($length < 0)
		$length = -$length;
	$str = "-";
	if ($length == 0)
		$length = rand(1, $randomLengthMax);
	$str .= get_random_string($length);
	return ($str);
}

function get_random($array) {

	if (count($array) <= 0)
		return ("");
	$n = rand(0, count($array) -1);
	return ($array[$n]);
}
